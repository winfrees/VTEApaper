/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MicroProtocol;

import MicroProtocol.menus.MultipleFilesMenu;
import preprocessing.MicroProtocolPreProcessing;
import MicroProtocol.listeners.AnalysisStartListener;
import MicroProtocol.listeners.BatchStateListener;
import MicroProtocol.listeners.MicroBlockSetupListener;
import MicroProtocol.listeners.BatchFileListListener;
import MicroProtocol.setup.MicroBlockObjectSetup;
import MicroProtocol.setup.MicroBlockProcessSetup;
import Exploration.MicroExplorer;
import VTC.ImageSelectionListener;
import VTC.microWindowManager;
import ij.CompositeImage;
import ij.IJ;
import ij.ImagePlus;
import ij.plugin.frame.ContrastAdjuster;
import ij.process.ByteProcessor;
import ij.process.ImageProcessor;
import ij.process.LUT;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JWindow;
import javax.swing.SwingUtilities;

/**
 *
 * @author winfrees
 */
public class protocolManager extends javax.swing.JFrame implements ImageSelectionListener, BatchStateListener, BatchFileListListener {

    private static int PROCESSBLOCKS = 1;
    private static int OBJECTBLOCKS = 2;

    public JList OpenImages;
    public microWindowManager openerWindow = new microWindowManager(OpenImages);
    
    protected ImagePlus OriginalImage;
    protected ImagePlus ProcessedImage;
    protected ImagePlus ThumbnailImage;
    protected JPanel thumbnail;
    
//batch support
    
    public MultipleFilesMenu mfm = new MultipleFilesMenu(false);
   // public microBatchManager batchWindow = new microBatchManager(OpenImages);
    protected boolean batch = false;
    
    protected JList batchImages;

//private microFolio[] microFolios = new microFolio[10];
    private int folioCount = 0;

//private ArrayList <ProtocolManagerAnalysisStartListener> listeners = new ArrayList <ProtocolManagerAnalysisStartListener>();
    public ArrayList PreProcessingStepsList = new ArrayList();
    public ArrayList ObjectStepsList = new ArrayList();
    public ArrayList ExploreStepsList = new ArrayList();

    public JWindow thumb = new JWindow();

    public GridLayout PreProcessingLayout = new GridLayout(5, 1, 0, 0);
    public GridLayout ObjectLayout = new GridLayout(5, 1, 0, 0);
    public GridLayout ExploreLayout = new GridLayout(5, 1, 0, 0);

    public Color ButtonBackground = new java.awt.Color(102, 102, 102);

    public ArrayList<String> Channels;

    private ArrayList<AnalysisStartListener> listeners = new ArrayList<AnalysisStartListener>();

    private MicroExperiment me = new MicroExperiment();
    
    //private ProtocolManagerMultiCase pmmc = new ProtocolManagerMultiCase(); 

    /**
     * Creates new form protocolManager
     */
    public protocolManager() {

        openerWindow.addImageSelectionListener(this);
        //batchWindow.addBatchFileListener(this);
        //mfm.addBatchListener(this);


        GuiSetup();
        initComponents();
        //IJ.log("Starting things up!");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        PreProcessing_Contextual = new javax.swing.JPopupMenu();
        Object_Contextual = new javax.swing.JPopupMenu();
        Explore_Contextual = new javax.swing.JPopupMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        Preprocessing_Header = new javax.swing.JPanel();
        OpenImage = new javax.swing.JButton();
        PreProcessingLabel = new javax.swing.JLabel();
        PreProcessing_Panel = new javax.swing.JPanel();
        OpenProtocol2 = new javax.swing.JButton();
        SaveProtocol2 = new javax.swing.JButton();
        AddStep_Preprocessing = new javax.swing.JButton();
        DeleteAllSteps_PreProcessing = new javax.swing.JButton();
        PreProcessingStepsPanel = new javax.swing.JPanel();
        PreProcessingGo = new javax.swing.JButton();
        Object_Header = new javax.swing.JPanel();
        Find_Objects_Label = new javax.swing.JLabel();
        ObjectsLabel = new javax.swing.JLabel();
        Object_Panel = new javax.swing.JPanel();
        OpenProtocol_Object = new javax.swing.JButton();
        SaveProtocol_Object = new javax.swing.JButton();
        AddStep_Object = new javax.swing.JButton();
        DeleteAllSteps_Object = new javax.swing.JButton();
        ObjectStepsPanel = new javax.swing.JPanel();
        ObjectGo = new javax.swing.JButton();
        ObjectProcess = new javax.swing.JProgressBar();
        Explore_Header = new javax.swing.JPanel();
        ExplorationLabel = new javax.swing.JLabel();
        Explore_Panel = new javax.swing.JPanel();
        OpenExplores = new javax.swing.JButton();
        SaveExplores = new javax.swing.JButton();
        AddStep_Explore = new javax.swing.JButton();
        DeleteAll_Explores = new javax.swing.JButton();
        ExploreStepsPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        Default_File = new javax.swing.JMenu();
        Default_Edit = new javax.swing.JMenu();
        Protocols_Menu = new javax.swing.JMenu();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("VTEA-Protocols");
        setBackground(new java.awt.Color(51, 51, 51));
        setBounds(new java.awt.Rectangle(0, 50, 690, 500));
        setMinimumSize(new java.awt.Dimension(690, 500));
        setName("ProcessingFrame"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        Preprocessing_Header.setBackground(new java.awt.Color(102, 102, 102));
        Preprocessing_Header.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Preprocessing_Header.setForeground(new java.awt.Color(102, 102, 102));
        Preprocessing_Header.setAlignmentX(0.0F);
        Preprocessing_Header.setAlignmentY(0.0F);
        Preprocessing_Header.setMaximumSize(new java.awt.Dimension(160, 36));
        Preprocessing_Header.setMinimumSize(new java.awt.Dimension(160, 36));
        Preprocessing_Header.setPreferredSize(new java.awt.Dimension(160, 36));

        OpenImage.setBackground(new java.awt.Color(102, 102, 102));
        OpenImage.setForeground(new java.awt.Color(102, 102, 102));
        OpenImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/insert-image-3_24.png"))); // NOI18N
        OpenImage.setLocation(new java.awt.Point(0, -2));
        OpenImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenImageActionPerformed(evt);
            }
        });

        PreProcessingLabel.setBackground(new java.awt.Color(204, 204, 204));
        PreProcessingLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        PreProcessingLabel.setForeground(new java.awt.Color(204, 204, 204));
        PreProcessingLabel.setText("PreProcessing");

        javax.swing.GroupLayout Preprocessing_HeaderLayout = new javax.swing.GroupLayout(Preprocessing_Header);
        Preprocessing_Header.setLayout(Preprocessing_HeaderLayout);
        Preprocessing_HeaderLayout.setHorizontalGroup(
            Preprocessing_HeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Preprocessing_HeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(OpenImage, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PreProcessingLabel)
                .addGap(73, 73, 73))
        );
        Preprocessing_HeaderLayout.setVerticalGroup(
            Preprocessing_HeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Preprocessing_HeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Preprocessing_HeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OpenImage, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PreProcessingLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        getContentPane().add(Preprocessing_Header, gridBagConstraints);

        PreProcessing_Panel.setBackground(new java.awt.Color(102, 102, 102));
        PreProcessing_Panel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        PreProcessing_Panel.setForeground(new java.awt.Color(102, 102, 102));
        PreProcessing_Panel.setAlignmentX(0.0F);
        PreProcessing_Panel.setAlignmentY(0.0F);
        PreProcessing_Panel.setComponentPopupMenu(PreProcessing_Contextual);
        PreProcessing_Panel.setMaximumSize(new java.awt.Dimension(220, 400));
        PreProcessing_Panel.setMinimumSize(new java.awt.Dimension(220, 400));
        PreProcessing_Panel.setPreferredSize(new java.awt.Dimension(220, 400));

        OpenProtocol2.setBackground(new java.awt.Color(102, 102, 102));
        OpenProtocol2.setForeground(new java.awt.Color(102, 102, 102));
        OpenProtocol2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/document-open-folder_24.png"))); // NOI18N

        SaveProtocol2.setBackground(new java.awt.Color(102, 102, 102));
        SaveProtocol2.setForeground(new java.awt.Color(102, 102, 102));
        SaveProtocol2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/document-save-2_24.png"))); // NOI18N

        AddStep_Preprocessing.setBackground(new java.awt.Color(102, 102, 102));
        AddStep_Preprocessing.setForeground(new java.awt.Color(102, 102, 102));
        AddStep_Preprocessing.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit-add_22.png"))); // NOI18N
        AddStep_Preprocessing.setToolTipText("Adds a preprocessing step.");
        AddStep_Preprocessing.setEnabled(false);
        AddStep_Preprocessing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddStep_PreprocessingActionPerformed(evt);
            }
        });

        DeleteAllSteps_PreProcessing.setBackground(new java.awt.Color(102, 102, 102));
        DeleteAllSteps_PreProcessing.setForeground(new java.awt.Color(102, 102, 102));
        DeleteAllSteps_PreProcessing.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit-clear-list_24.png"))); // NOI18N
        DeleteAllSteps_PreProcessing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteAllSteps_PreProcessingActionPerformed(evt);
            }
        });

        PreProcessingStepsPanel.setBackground(VTC._VTC.ACTIONPANELBACKGROUND);
        PreProcessingStepsPanel.setComponentPopupMenu(PreProcessing_Contextual);
        PreProcessingStepsPanel.setPreferredSize(new java.awt.Dimension(196, 306));

        javax.swing.GroupLayout PreProcessingStepsPanelLayout = new javax.swing.GroupLayout(PreProcessingStepsPanel);
        PreProcessingStepsPanel.setLayout(PreProcessingStepsPanelLayout);
        PreProcessingStepsPanelLayout.setHorizontalGroup(
            PreProcessingStepsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
        );
        PreProcessingStepsPanelLayout.setVerticalGroup(
            PreProcessingStepsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 306, Short.MAX_VALUE)
        );

        PreProcessingGo.setBackground(new java.awt.Color(102, 102, 102));
        PreProcessingGo.setText("Preprocess");
        PreProcessingGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PreProcessingGoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PreProcessing_PanelLayout = new javax.swing.GroupLayout(PreProcessing_Panel);
        PreProcessing_Panel.setLayout(PreProcessing_PanelLayout);
        PreProcessing_PanelLayout.setHorizontalGroup(
            PreProcessing_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PreProcessing_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PreProcessing_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PreProcessing_PanelLayout.createSequentialGroup()
                        .addGroup(PreProcessing_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PreProcessing_PanelLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(SaveProtocol2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(OpenProtocol2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AddStep_Preprocessing, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeleteAllSteps_PreProcessing, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PreProcessing_PanelLayout.createSequentialGroup()
                        .addGroup(PreProcessing_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PreProcessingStepsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PreProcessingGo, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        PreProcessing_PanelLayout.setVerticalGroup(
            PreProcessing_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PreProcessing_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PreProcessing_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SaveProtocol2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OpenProtocol2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddStep_Preprocessing, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteAllSteps_PreProcessing, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PreProcessingStepsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PreProcessingGo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(PreProcessing_Panel, gridBagConstraints);

        Object_Header.setBackground(new java.awt.Color(102, 102, 102));
        Object_Header.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Object_Header.setForeground(new java.awt.Color(102, 102, 102));
        Object_Header.setAlignmentX(0.0F);
        Object_Header.setAlignmentY(0.0F);
        Object_Header.setMaximumSize(new java.awt.Dimension(160, 36));
        Object_Header.setMinimumSize(new java.awt.Dimension(160, 36));
        Object_Header.setPreferredSize(new java.awt.Dimension(160, 36));

        Find_Objects_Label.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        Find_Objects_Label.setText("Find Objects");

        ObjectsLabel.setBackground(new java.awt.Color(204, 204, 204));
        ObjectsLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ObjectsLabel.setForeground(new java.awt.Color(204, 204, 204));
        ObjectsLabel.setText("Objects");

        javax.swing.GroupLayout Object_HeaderLayout = new javax.swing.GroupLayout(Object_Header);
        Object_Header.setLayout(Object_HeaderLayout);
        Object_HeaderLayout.setHorizontalGroup(
            Object_HeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Object_HeaderLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(ObjectsLabel)
                .addGap(225, 225, 225)
                .addComponent(Find_Objects_Label)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Object_HeaderLayout.setVerticalGroup(
            Object_HeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Object_HeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Object_HeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Find_Objects_Label)
                    .addComponent(ObjectsLabel))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        getContentPane().add(Object_Header, gridBagConstraints);

        Object_Panel.setBackground(new java.awt.Color(102, 102, 102));
        Object_Panel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Object_Panel.setForeground(new java.awt.Color(102, 102, 102));
        Object_Panel.setAlignmentX(0.0F);
        Object_Panel.setAlignmentY(0.0F);
        Object_Panel.setComponentPopupMenu(Object_Contextual);
        Object_Panel.setRequestFocusEnabled(false);

        OpenProtocol_Object.setBackground(new java.awt.Color(102, 102, 102));
        OpenProtocol_Object.setForeground(new java.awt.Color(102, 102, 102));
        OpenProtocol_Object.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/document-open-folder_24.png"))); // NOI18N

        SaveProtocol_Object.setBackground(new java.awt.Color(102, 102, 102));
        SaveProtocol_Object.setForeground(new java.awt.Color(102, 102, 102));
        SaveProtocol_Object.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/document-save-2_24.png"))); // NOI18N

        AddStep_Object.setBackground(new java.awt.Color(102, 102, 102));
        AddStep_Object.setForeground(new java.awt.Color(102, 102, 102));
        AddStep_Object.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit-add_22.png"))); // NOI18N
        AddStep_Object.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddStep_ObjectActionPerformed(evt);
            }
        });

        DeleteAllSteps_Object.setBackground(new java.awt.Color(102, 102, 102));
        DeleteAllSteps_Object.setForeground(new java.awt.Color(102, 102, 102));
        DeleteAllSteps_Object.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit-clear-list_24.png"))); // NOI18N
        DeleteAllSteps_Object.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteAllSteps_ObjectActionPerformed(evt);
            }
        });

        ObjectStepsPanel.setBackground(VTC._VTC.ACTIONPANELBACKGROUND);
        ObjectStepsPanel.setComponentPopupMenu(PreProcessing_Contextual);
        ObjectStepsPanel.setPreferredSize(new java.awt.Dimension(160, 305));

        javax.swing.GroupLayout ObjectStepsPanelLayout = new javax.swing.GroupLayout(ObjectStepsPanel);
        ObjectStepsPanel.setLayout(ObjectStepsPanelLayout);
        ObjectStepsPanelLayout.setHorizontalGroup(
            ObjectStepsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
        );
        ObjectStepsPanelLayout.setVerticalGroup(
            ObjectStepsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 305, Short.MAX_VALUE)
        );

        ObjectGo.setBackground(new java.awt.Color(102, 102, 102));
        ObjectGo.setText("Find Objects");
        ObjectGo.setToolTipText("");
        ObjectGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ObjectGoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Object_PanelLayout = new javax.swing.GroupLayout(Object_Panel);
        Object_Panel.setLayout(Object_PanelLayout);
        Object_PanelLayout.setHorizontalGroup(
            Object_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Object_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Object_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Object_PanelLayout.createSequentialGroup()
                        .addComponent(ObjectStepsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(Object_PanelLayout.createSequentialGroup()
                        .addGroup(Object_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Object_PanelLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(SaveProtocol_Object, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(OpenProtocol_Object, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AddStep_Object, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeleteAllSteps_Object, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Object_PanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(ObjectGo, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ObjectProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        Object_PanelLayout.setVerticalGroup(
            Object_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Object_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Object_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SaveProtocol_Object, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OpenProtocol_Object, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddStep_Object, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteAllSteps_Object, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ObjectStepsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Object_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ObjectGo)
                    .addComponent(ObjectProcess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        getContentPane().add(Object_Panel, gridBagConstraints);

        Explore_Header.setBackground(new java.awt.Color(102, 102, 102));
        Explore_Header.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Explore_Header.setForeground(new java.awt.Color(102, 102, 102));
        Explore_Header.setAlignmentX(0.0F);
        Explore_Header.setAlignmentY(0.0F);
        Explore_Header.setPreferredSize(new java.awt.Dimension(160, 36));

        ExplorationLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ExplorationLabel.setForeground(new java.awt.Color(204, 204, 204));
        ExplorationLabel.setText("Exploration");

        javax.swing.GroupLayout Explore_HeaderLayout = new javax.swing.GroupLayout(Explore_Header);
        Explore_Header.setLayout(Explore_HeaderLayout);
        Explore_HeaderLayout.setHorizontalGroup(
            Explore_HeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Explore_HeaderLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(ExplorationLabel)
                .addGap(115, 115, 115))
        );
        Explore_HeaderLayout.setVerticalGroup(
            Explore_HeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Explore_HeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ExplorationLabel)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        getContentPane().add(Explore_Header, gridBagConstraints);

        Explore_Panel.setBackground(new java.awt.Color(102, 102, 102));
        Explore_Panel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Explore_Panel.setForeground(new java.awt.Color(102, 102, 102));
        Explore_Panel.setAlignmentX(0.0F);
        Explore_Panel.setAlignmentY(0.0F);
        Explore_Panel.setAutoscrolls(true);
        Explore_Panel.setComponentPopupMenu(Explore_Contextual);
        Explore_Panel.setPreferredSize(new java.awt.Dimension(220, 400));

        OpenExplores.setBackground(new java.awt.Color(102, 102, 102));
        OpenExplores.setForeground(new java.awt.Color(102, 102, 102));
        OpenExplores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/document-open-folder_24.png"))); // NOI18N

        SaveExplores.setBackground(new java.awt.Color(102, 102, 102));
        SaveExplores.setForeground(new java.awt.Color(102, 102, 102));
        SaveExplores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/document-save-2_24.png"))); // NOI18N

        AddStep_Explore.setBackground(new java.awt.Color(102, 102, 102));
        AddStep_Explore.setForeground(new java.awt.Color(102, 102, 102));
        AddStep_Explore.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit-add_22.png"))); // NOI18N
        AddStep_Explore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddStep_ExploreActionPerformed(evt);
            }
        });

        DeleteAll_Explores.setBackground(new java.awt.Color(102, 102, 102));
        DeleteAll_Explores.setForeground(new java.awt.Color(102, 102, 102));
        DeleteAll_Explores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit-clear-list_24.png"))); // NOI18N
        DeleteAll_Explores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteAll_ExploresActionPerformed(evt);
            }
        });

        ExploreStepsPanel.setBackground(VTC._VTC.ACTIONPANELBACKGROUND);
        ExploreStepsPanel.setComponentPopupMenu(PreProcessing_Contextual);
        ExploreStepsPanel.setPreferredSize(new java.awt.Dimension(160, 305));

        javax.swing.GroupLayout ExploreStepsPanelLayout = new javax.swing.GroupLayout(ExploreStepsPanel);
        ExploreStepsPanel.setLayout(ExploreStepsPanelLayout);
        ExploreStepsPanelLayout.setHorizontalGroup(
            ExploreStepsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 205, Short.MAX_VALUE)
        );
        ExploreStepsPanelLayout.setVerticalGroup(
            ExploreStepsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 339, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout Explore_PanelLayout = new javax.swing.GroupLayout(Explore_Panel);
        Explore_Panel.setLayout(Explore_PanelLayout);
        Explore_PanelLayout.setHorizontalGroup(
            Explore_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Explore_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Explore_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Explore_PanelLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(SaveExplores, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(OpenExplores, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addComponent(AddStep_Explore, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DeleteAll_Explores, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(Explore_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Explore_PanelLayout.createSequentialGroup()
                    .addGap(5, 5, 5)
                    .addComponent(ExploreStepsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        Explore_PanelLayout.setVerticalGroup(
            Explore_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Explore_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Explore_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SaveExplores, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OpenExplores, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddStep_Explore, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteAll_Explores, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
            .addGroup(Explore_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Explore_PanelLayout.createSequentialGroup()
                    .addGap(45, 45, 45)
                    .addComponent(ExploreStepsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(12, Short.MAX_VALUE)))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        getContentPane().add(Explore_Panel, gridBagConstraints);

        jMenuBar1.setLocation(new java.awt.Point(-10, 0));

        Default_File.setText("File");
        jMenuBar1.add(Default_File);

        Default_Edit.setText("Edit");
        jMenuBar1.add(Default_Edit);

        Protocols_Menu.setText("Protocols");
        Protocols_Menu.setToolTipText("");
        jMenuBar1.add(Protocols_Menu);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenImageActionPerformed
       
        openerWindow.updateImages();
        openerWindow.setVisible(true);

    }//GEN-LAST:event_OpenImageActionPerformed

    private void AddStep_PreprocessingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddStep_PreprocessingActionPerformed
        // TODO add your handling code here:
        if (PreProcessingStepsList.size() > 0) {
            ProcessStepBlockGUI block = new ProcessStepBlockGUI();

            PreProcessingStepsPanel.setLayout(PreProcessingLayout);
           
            PreProcessingStepsPanel.add(block.getPanel());
            PreProcessingStepsPanel.repaint();
            pack();

            PreProcessingStepsList.add(block);

            if (PreProcessingStepsList.size() <= 4) {

                AddStep_Preprocessing.setEnabled(true);
            }
            if (PreProcessingStepsList.size() >= 5) {

                AddStep_Preprocessing.setEnabled(false);
            }
        }
    }//GEN-LAST:event_AddStep_PreprocessingActionPerformed

    private void DeleteAllSteps_PreProcessingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteAllSteps_PreProcessingActionPerformed
        // TODO add your handling code here:

        PreProcessingStepsList.clear();
        PreProcessingStepsPanel.removeAll();
        AddStep_Preprocessing.setEnabled(false);
        PreProcessingStepsPanel.repaint();
        pack();
    }//GEN-LAST:event_DeleteAllSteps_PreProcessingActionPerformed

    private void PreProcessingGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PreProcessingGoActionPerformed
        executePreprocessing();
    }//GEN-LAST:event_PreProcessingGoActionPerformed

    private void AddStep_ObjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddStep_ObjectActionPerformed
        // TODO add your handling code here:
        //if(ObjectStepsList.size() > 0){
        ObjectStepBlockGUI block = new ObjectStepBlockGUI();

        ObjectStepsPanel.setLayout(ObjectLayout);
        ObjectStepsPanel.add(block.getPanel());
        ObjectStepsPanel.repaint();
        pack();

        ObjectStepsList.add(block);

        if (ObjectStepsList.size() <= 4) {

            AddStep_Object.setEnabled(true);
        }
        if (ObjectStepsList.size() >= 5) {

            AddStep_Object.setEnabled(false);
        }
        //}
    }//GEN-LAST:event_AddStep_ObjectActionPerformed

    private void DeleteAllSteps_ObjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteAllSteps_ObjectActionPerformed
        ObjectStepsList.clear();
        ObjectStepsPanel.removeAll();
        AddStep_Object.setEnabled(true);
        ObjectStepsPanel.repaint();
        pack();
    }//GEN-LAST:event_DeleteAllSteps_ObjectActionPerformed

    private void ObjectGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ObjectGoActionPerformed
        // TODO add your handling code here:
        executeObjectFinding();
    }//GEN-LAST:event_ObjectGoActionPerformed

    private void AddStep_ExploreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddStep_ExploreActionPerformed
        ExploreStepBlockGUI block = new ExploreStepBlockGUI();

        ExploreStepsPanel.setLayout(ExploreLayout);
        ExploreStepsPanel.add(block.getPanel());
        ExploreStepsPanel.repaint();
        pack();

        ExploreStepsList.add(block);

        if (ExploreStepsList.size() <= 4) {

            AddStep_Explore.setEnabled(true);
        }
        if (ExploreStepsList.size() >= 5) {

            AddStep_Explore.setEnabled(false);
        }
    }//GEN-LAST:event_AddStep_ExploreActionPerformed

    private void DeleteAll_ExploresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteAll_ExploresActionPerformed
        ExploreStepsList.clear();
        ExploreStepsPanel.removeAll();
        AddStep_Explore.setEnabled(true);
        ExploreStepsPanel.repaint();
        pack();
    }//GEN-LAST:event_DeleteAll_ExploresActionPerformed

    /**
     * @param args the command line arguments
     */
    private void GuiSetup() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
//                       // Set System L&F
//            UIManager.setLookAndFeel(
//            UIManager.getSystemLookAndFeelClassName());
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(protocolManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(protocolManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(protocolManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(protocolManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                //new pipelineManager().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddStep_Explore;
    private javax.swing.JButton AddStep_Object;
    public javax.swing.JButton AddStep_Preprocessing;
    private javax.swing.JMenu Default_Edit;
    private javax.swing.JMenu Default_File;
    private javax.swing.JButton DeleteAllSteps_Object;
    private javax.swing.JButton DeleteAllSteps_PreProcessing;
    private javax.swing.JButton DeleteAll_Explores;
    private javax.swing.JLabel ExplorationLabel;
    public javax.swing.JPanel ExploreStepsPanel;
    private javax.swing.JPopupMenu Explore_Contextual;
    private javax.swing.JPanel Explore_Header;
    private javax.swing.JPanel Explore_Panel;
    private javax.swing.JLabel Find_Objects_Label;
    private javax.swing.JButton ObjectGo;
    private javax.swing.JProgressBar ObjectProcess;
    public javax.swing.JPanel ObjectStepsPanel;
    private javax.swing.JPopupMenu Object_Contextual;
    private javax.swing.JPanel Object_Header;
    private javax.swing.JPanel Object_Panel;
    private javax.swing.JLabel ObjectsLabel;
    private javax.swing.JButton OpenExplores;
    private javax.swing.JButton OpenImage;
    private javax.swing.JButton OpenProtocol2;
    private javax.swing.JButton OpenProtocol_Object;
    private javax.swing.JButton PreProcessingGo;
    private javax.swing.JLabel PreProcessingLabel;
    public javax.swing.JPanel PreProcessingStepsPanel;
    private javax.swing.JPopupMenu PreProcessing_Contextual;
    public javax.swing.JPanel PreProcessing_Panel;
    private javax.swing.JPanel Preprocessing_Header;
    private javax.swing.JMenu Protocols_Menu;
    private javax.swing.JButton SaveExplores;
    private javax.swing.JButton SaveProtocol2;
    private javax.swing.JButton SaveProtocol_Object;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables

    
    
    //classes for batch processing

    
    @Override
    public void batchStateAdd(String selected, ArrayList tabs) {
//        IJ.log("Batch state changed " + batch);
//        this.batch = batch;
//        if(this.batch == true){this.batchWindow.updateImages(); this.batchWindow.setVisible(true);}
    }

    @Override
    public void newBatchFileList(int[] batchfileindices) {
        
        //this.batchImages.
        
        //get file list
        //add folders to the experiment
        
    }
    
    public void processBatchFileList(){}
    
    public void findObjectsBatchFileList(){}
    
    //public void 
    
    
//classes for step blocks
    private final class ObjectStepBlockGUI extends Object implements MicroBlockSetupListener {

        JPanel step = new JPanel();
        Font PositionFont = new Font("Arial", Font.PLAIN, 16);
        Font ObjectFont = new Font("Arial", Font.BOLD, 12);
        Font CommentFont = new Font("Arial", Font.ITALIC, 10);
        JLabel Position = new JLabel();
        JLabel Comment = new JLabel("Block by Block");
        JLabel Object = new JLabel("First things first");
        boolean ProcessTypeSet = false;
        int position;

        MicroBlockObjectSetup mbs;

        private ArrayList settings;

        public ObjectStepBlockGUI() {
            BuildStepBlock("Empty Step", "", Color.LIGHT_GRAY);
        }

        public ObjectStepBlockGUI(String ProcessText, String CommentText, Color BlockColor) {
            BuildStepBlock(ProcessText, CommentText, Color.GREEN);
        }

        private void BuildStepBlock(String ProcessText, String CommentText, Color BlockColor) {

            if (ObjectStepsList.isEmpty()) {
                position = 1;
            } else {
                position = ObjectStepsList.size() + 1;
            }

            Object.setText(ProcessText);

            Comment.setText(CommentText);
            step.setBackground(BlockColor);

            //need max size set here
            Position.setText("Classifier#" + position);
            Position.setFont(PositionFont);

            if (Object.getText().length() > 12) {
                ObjectFont = new Font("Arial", Font.BOLD, 8);
            }
            if (Comment.getText().length() > 12) {
                CommentFont = new Font("Arial", Font.BOLD, 5);
            }

            Object.setFont(ObjectFont);
            Comment.setFont(CommentFont);

            mbs = new MicroBlockObjectSetup(position, Channels);

            mbs.setVisible(false);
            mbs.addMicroBlockSetupListener(this);

            JButton DeleteButton = new JButton();
            DeleteButton.addActionListener(new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    deleteObjectStep(position);
                }
            });

            JButton EditButton = new JButton();
            EditButton.addActionListener(new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    mbs.setVisible(true);
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
            });

            DeleteButton.setSize(20, 20);
            DeleteButton.setBackground(ButtonBackground);
            DeleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit-delete-6_16.png")));

            EditButton.setSize(20, 20);
            EditButton.setBackground(ButtonBackground);
            EditButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit-4.png")));

            step.setSize(205, 20);
            step.setBorder(javax.swing.BorderFactory.createEtchedBorder());

            step.setLayout(new GridBagLayout());
            GridBagConstraints layoutConstraints = new GridBagConstraints();

            layoutConstraints.fill = GridBagConstraints.HORIZONTAL;
            layoutConstraints.gridx = 0;
            layoutConstraints.gridy = 0;
            layoutConstraints.weightx = 1;
            layoutConstraints.weighty = 1;
            step.add(Position, layoutConstraints);

            layoutConstraints.fill = GridBagConstraints.HORIZONTAL;
            layoutConstraints.gridx = 1;
            layoutConstraints.gridy = 0;
            layoutConstraints.weightx = 20;
            layoutConstraints.weighty = 20;
            step.add(Object, layoutConstraints);

            layoutConstraints.fill = GridBagConstraints.HORIZONTAL;
            layoutConstraints.gridx = 1;
            layoutConstraints.gridy = 1;
            layoutConstraints.weightx = 20;
            layoutConstraints.weighty = 20;
            step.add(Comment, layoutConstraints);

            layoutConstraints.fill = GridBagConstraints.BOTH;
            layoutConstraints.gridx = 2;
            layoutConstraints.gridy = 0;
            layoutConstraints.weightx = -1;
            layoutConstraints.weighty = -1;
            layoutConstraints.ipadx = -1;
            layoutConstraints.ipady = -1;
            step.add(DeleteButton, layoutConstraints);

            layoutConstraints.fill = GridBagConstraints.BOTH;
            layoutConstraints.gridx = 2;
            layoutConstraints.gridy = 1;
            layoutConstraints.weightx = -1;
            layoutConstraints.weighty = -1;
            layoutConstraints.ipadx = -1;
            layoutConstraints.ipady = -1;
            step.add(EditButton, layoutConstraints);

            step.addMouseListener(new java.awt.event.MouseListener() {
                @Override
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                }

                ;
            @Override
                public void mouseExited(java.awt.event.MouseEvent evt) {
                    //thumb.setVisible(false);
                }

                ;
            @Override
                public void mouseReleased(java.awt.event.MouseEvent evt) {
                    thumb.setVisible(false);
                }

                ;
            @Override
                public void mousePressed(java.awt.event.MouseEvent evt) {
//                    thumb.setSize(150, 150);
//                    thumb.setLocation(evt.getX(), evt.getY());
//                    thumb.setVisible(true);
                }

                ;
            @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                }
            ;
        }

        );
        }

        public void setPosition(int n) {
            position = n;
            Position.setText(position + ".");
        }

        public JPanel getPanel() {
            return step;
        }

        public int getPosition() {
            return position;
        }

        public ArrayList getVariables() {
            return settings;
        }

        @Override
        public void onChangeSetup(ArrayList al2) {

            ArrayList al = new ArrayList();

            al = (ArrayList) al2.get(0);

            Object.setText(VTC._VTC.PROCESSOPTIONS[0]);
            //Comment.setText(al.get(1).toString());
            RebuildPanelObject();
            this.settings = al2;

        }
    }

    private final class ProcessStepBlockGUI extends Object implements MicroBlockSetupListener, BatchFileListListener {

        JPanel step = new JPanel();
        Font PositionFont = new Font("Arial", Font.PLAIN, 18);
        Font ProcessFont = new Font("Arial", Font.BOLD, 12);
        Font CommentFont = new Font("Arial", Font.ITALIC, 10);
        JLabel Position = new JLabel();
        JLabel Comment = new JLabel("Block by Block");
        JLabel Process = new JLabel("First things first");
        boolean ProcessTypeSet = false;
        int position;
        
        //boolean multiple;
        
        

        MicroBlockProcessSetup mbps;

        private ArrayList settings;

        public ProcessStepBlockGUI() {
            BuildStepBlock("Empty Step", "", Color.LIGHT_GRAY, false);
        }

        public ProcessStepBlockGUI(String ProcessText, String CommentText, Color BlockColor, boolean multiple) {
            BuildStepBlock(ProcessText, CommentText, Color.GREEN, multiple);
        }

        ;

        private void BuildStepBlock(String ProcessText, String CommentText, Color BlockColor, boolean multiple) {

            batch = multiple;
            
            if (PreProcessingStepsList.isEmpty()) {
                position = 1;
            } else {
                position = PreProcessingStepsList.size() + 1;
            }

            Process.setText(ProcessText);

            Comment.setText(CommentText);
            step.setBackground(BlockColor);

            //need max size set here
            Position.setText(position + ".");

            Position.setFont(PositionFont);

            if (Process.getText().length() > 12) {
                ProcessFont = new Font("Arial", Font.BOLD, 8);
            }
            if (Comment.getText().length() > 12) {
                CommentFont = new Font("Arial", Font.BOLD, 6);
            }

            Process.setFont(ProcessFont);
            Comment.setFont(CommentFont);

            mbps = new MicroProtocol.setup.MicroBlockProcessSetup(position, Channels);

            mbps.setVisible(false);
            mbps.addMicroBlockSetupListener(this);

            JButton DeleteButton = new JButton();
            DeleteButton.addActionListener(new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {

                    deleteProcessStep(position);

                    // throw new UnsupportedOperationException("Block Delete Requested."); //To change body of generated methods, choose Tools | Templates.
                }
            });

            JButton EditButton = new JButton();
            EditButton.addActionListener(new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    mbps.setVisible(true);
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
            });

            DeleteButton.setSize(20, 20);
            DeleteButton.setBackground(ButtonBackground);
            DeleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit-delete-6_16.png")));

            EditButton.setSize(20, 20);
            EditButton.setBackground(ButtonBackground);
            EditButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit-4.png")));

            step.setSize(205, 20);
            step.setBorder(javax.swing.BorderFactory.createEtchedBorder());

            step.setLayout(new GridBagLayout());
            GridBagConstraints layoutConstraints = new GridBagConstraints();

            layoutConstraints.fill = GridBagConstraints.HORIZONTAL;
            layoutConstraints.anchor = GridBagConstraints.NORTHWEST;
            layoutConstraints.gridx = 0;
            layoutConstraints.gridy = 0;
            layoutConstraints.weightx = 1;
            layoutConstraints.weighty = 1;
            layoutConstraints.ipadx = 10;

            step.add(Position, layoutConstraints);

            layoutConstraints.fill = GridBagConstraints.HORIZONTAL;
            layoutConstraints.anchor = GridBagConstraints.CENTER;
            layoutConstraints.gridx = 1;
            layoutConstraints.gridy = 0;
            layoutConstraints.weightx = 20;
            layoutConstraints.weighty = 20;
            step.add(Process, layoutConstraints);

            layoutConstraints.fill = GridBagConstraints.HORIZONTAL;
            layoutConstraints.gridx = 1;
            layoutConstraints.gridy = 1;
            layoutConstraints.weightx = 20;
            layoutConstraints.weighty = 20;
            step.add(Comment, layoutConstraints);

            if (position > 1) {

                layoutConstraints.fill = GridBagConstraints.BOTH;
                layoutConstraints.anchor = GridBagConstraints.EAST;
                layoutConstraints.gridx = 2;
                layoutConstraints.gridy = 0;
                layoutConstraints.weightx = -1;
                layoutConstraints.weighty = -1;
                layoutConstraints.ipadx = -1;
                layoutConstraints.ipady = -1;
                step.add(DeleteButton, layoutConstraints);
                layoutConstraints.fill = GridBagConstraints.BOTH;
                layoutConstraints.anchor = GridBagConstraints.EAST;
                layoutConstraints.gridx = 2;
                layoutConstraints.gridy = 1;
                layoutConstraints.weightx = -1;
                layoutConstraints.weighty = -1;
                layoutConstraints.ipadx = -1;
                layoutConstraints.ipady = -1;
                step.add(EditButton, layoutConstraints);

            }

            step.addMouseListener(new java.awt.event.MouseListener() {
                @Override
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                }

                ;
            @Override
                public void mouseExited(java.awt.event.MouseEvent evt) {
                    //thumb.setVisible(false);
                }

                ;
            @Override
                public void mouseReleased(java.awt.event.MouseEvent evt) {
                    thumb.setVisible(false);
                }
                
                ;
            @Override
                public void mousePressed(java.awt.event.MouseEvent evt) {
                    if(!SwingUtilities.isRightMouseButton(evt)){
                        thumb.setSize(300, 300);
                        //ExtractSteps
                        //new micro preproccessing use imp returned.
                       
                        thumb.add(new ImagePanel(ThumbnailImage.getImage()));
                    thumb.setLocation(evt.getXOnScreen(), evt.getYOnScreen());
                    thumb.setVisible(true);}
                }
                
                ;
            @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    if(SwingUtilities.isRightMouseButton(evt) && position == 1) { 
                        IJ.log("Rightclick detected on step: " + position);       
                        mfm.show(evt.getComponent(), evt.getX(), evt.getY());
                          }
                }
            ;

        }

        );

        //step.
            


        }


        private void ProcessTypeManager() {
        }

        public void setPosition(int n) {
            position = n;
            Position.setText(position + ".");
        }

        public JPanel getPanel() {
            return step;
        }

        public int getPosition() {
            return position;
        }

        public ArrayList getVariables() {
            return settings;
        }

        @Override
        public void onChangeSetup(ArrayList al) {

            Process.setText(al.get(0).toString());
            Comment.setText(al.get(1).toString());

            RebuildPanelPreProcessing();

            this.settings = al;
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void newBatchFileList(int[] batchfileindices) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

    }

    private final class ExploreStepBlockGUI extends Object implements MicroBlockSetupListener {

        JPanel step = new JPanel();

        List protocoldetails = new ArrayList();
        final JComboBox objects = new JComboBox();

        Font PositionFont = new Font("Arial", Font.PLAIN, 18);
        Font ProcessFont = new Font("Arial", Font.BOLD, 12);
        Font CommentFont = new Font("Arial", Font.ITALIC, 10);
        JLabel Position = new JLabel();
        JLabel Comment = new JLabel("");
        JLabel Process = new JLabel("");
        boolean ProcessTypeSet = false;
        int position;

        MicroExplorer me;

        public ExploreStepBlockGUI() {
            BuildStepBlock("Some process", "this is a critical step", Color.LIGHT_GRAY);
        }

        public ExploreStepBlockGUI(String ProcessText, String CommentText, Color BlockColor) {
            BuildStepBlock(ProcessText, CommentText, BlockColor);
        }

        ;

        private void BuildStepBlock(String ProcessText, String CommentText, Color BlockColor) {

            protocoldetails = ExtractSteps(ObjectStepsList, OBJECTBLOCKS);

            final JComboBox objects = new JComboBox();
            List placeholder = new ArrayList();

            //for (int i = 0; i <= protocoldetails.size() - 1; i++) {
            placeholder = (ArrayList) (protocoldetails.get(0));
            objects.addItem("CH." + placeholder.get(0));

            //     + " " + MicroBlockObjectSetup.getMethod(Integer.parseInt(placeholder.get(1).toString())));
            //}
            if (ExploreStepsList.isEmpty()) {
                position = 1;
            } else {
                position = ExploreStepsList.size() + 1;
            }

            Process.setText(ProcessText);

            Comment.setText(CommentText);
            step.setBackground(BlockColor);

            //need max size set here
            Position.setText(position + ".");

            Position.setFont(PositionFont);

            if (Process.getText().length() > 12) {
                ProcessFont = new Font("Arial", Font.BOLD, 8);
            }
            if (Comment.getText().length() > 12) {
                CommentFont = new Font("Arial", Font.BOLD, 5);
            }

            Process.setFont(ProcessFont);
            Comment.setFont(CommentFont);

            JButton DeleteButton = new JButton();
            DeleteButton.addActionListener(new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {

                    deleteExploreStep(position);

                    // throw new UnsupportedOperationException("Block Delete Requested."); //To change body of generated methods, choose Tools | Templates.
                }
            });

            JButton ViewButton = new JButton();
            ViewButton.addActionListener(new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    IJ.log("Requesting explorer window for object: " + (Integer)objects.getSelectedIndex());
                    executeExploring((Integer)objects.getSelectedIndex());
                    IJ.log("Explorer window openned!");
                }
            });

            DeleteButton.setSize(20, 20);
            DeleteButton.setBackground(ButtonBackground);
            DeleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit-delete-6_16.png")));

            ViewButton.setSize(20, 20);
            ViewButton.setBackground(ButtonBackground);
            ViewButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit-4.png")));

            step.setSize(205, 20);
            step.setBorder(javax.swing.BorderFactory.createEtchedBorder());

            step.setLayout(new GridBagLayout());
            GridBagConstraints layoutConstraints = new GridBagConstraints();

            layoutConstraints.fill = GridBagConstraints.HORIZONTAL;
            layoutConstraints.gridx = 0;
            layoutConstraints.gridy = 0;
            layoutConstraints.weightx = 1;
            layoutConstraints.weighty = 1;
            step.add(Position, layoutConstraints);

            layoutConstraints.fill = GridBagConstraints.HORIZONTAL;
            layoutConstraints.gridx = 1;
            layoutConstraints.gridy = 0;
            layoutConstraints.weightx = 20;
            layoutConstraints.weighty = 20;
            step.add(objects, layoutConstraints);

            layoutConstraints.fill = GridBagConstraints.HORIZONTAL;
            layoutConstraints.gridx = 1;
            layoutConstraints.gridy = 1;
            layoutConstraints.weightx = 20;
            layoutConstraints.weighty = 20;
            step.add(Comment, layoutConstraints);

            layoutConstraints.fill = GridBagConstraints.BOTH;
            layoutConstraints.gridx = 2;
            layoutConstraints.gridy = 0;
            layoutConstraints.weightx = -1;
            layoutConstraints.weighty = -1;
            layoutConstraints.ipadx = -1;
            layoutConstraints.ipady = -1;
            step.add(DeleteButton, layoutConstraints);
            layoutConstraints.fill = GridBagConstraints.BOTH;
            layoutConstraints.gridx = 2;
            layoutConstraints.gridy = 1;
            layoutConstraints.weightx = -1;
            layoutConstraints.weighty = -1;
            layoutConstraints.ipadx = -1;
            layoutConstraints.ipady = -1;
            step.add(ViewButton, layoutConstraints);

            step.addMouseListener(new java.awt.event.MouseListener() {
                @Override
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                }

                ;
            @Override
                public void mouseExited(java.awt.event.MouseEvent evt) {
                    //thumb.setVisible(false);
                }

                ;
            @Override
                public void mouseReleased(java.awt.event.MouseEvent evt) {
                }

                ;
            @Override
                public void mousePressed(java.awt.event.MouseEvent evt) {
                }

                ;
            @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                }
            ;
        }

        );
       }

        public void setPosition(int n) {
            position = n;
            Position.setText(position + ".");
        }

        public JPanel getPanel() {
            return step;
        }

        public int getPosition() {
            return position;
        }

        @Override
        public void onChangeSetup(ArrayList al) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

    }

    
    //GUI table manipulation
    
    private void deleteProcessStep(int position) {

        //remove from PreProcessingStepsList
        PreProcessingStepsList.remove(position - 1);

        //IJ.showMessage("Block "+position+" removed from list");
        //refactor postions of objects in List
        UpdatePositionPreProcessing(position);

        //IJ.showMessage("Refactored position, " + PreProcessingStepsList.size()+ " blocks remain.");
        PreProcessingStepsList.trimToSize();

        //IJ.showMessage("List trimmed to size");
        //reset PreProcessingStepsPanel
        PreProcessingStepsPanel.removeAll();
        //PreProcessingStepsPanel.setSize(WIDTH, WIDTH);
        PreProcessingStepsPanel.setLayout(PreProcessingLayout);

        //IJ.showMessage("Panel cleared position");
        //rebuild Panel,  will need to generalize this for use with object finding
        if (PreProcessingStepsList.size() < 0) {
        } else {
            RebuildPanelPreProcessing();
        }

        //IJ.showMessage("Panel rebuilt");
        if (5 >= PreProcessingStepsList.size()) {
            AddStep_Preprocessing.setEnabled(true);
        }

        PreProcessingStepsPanel.repaint();
        pack();

    }

    private void deleteObjectStep(int position) {

        //remove from ObjectList
        ObjectStepsList.remove(position - 1);

        //IJ.showMessage("Block "+position+" removed from list");
        //refactor postions of objects in List
        UpdatePositionObject(position);

        //IJ.showMessage("Refactored position, " + PreProcessingStepsList.size()+ " blocks remain.");
        ObjectStepsList.trimToSize();

        //IJ.showMessage("List trimmed to size");
        //reset PreProcessingStepsPanel
        ObjectStepsPanel.removeAll();

        ObjectStepsPanel.setLayout(ObjectLayout);

        //IJ.showMessage("Panel cleared position");
        //rebuild Panel
        if (ObjectStepsList.size() < 0) {
        } else {
            RebuildPanelObject();
        }

        //IJ.showMessage("Panel rebuilt");
        if (5 >= ObjectStepsList.size()) {
            AddStep_Object.setEnabled(true);
        }

        ObjectStepsPanel.repaint();
        pack();

    }

    private void deleteExploreStep(int position) {

        //remove from ObjectList
        ExploreStepsList.remove(position - 1);

        //IJ.showMessage("Block "+position+" removed from list");
        //refactor postions of objects in List
        UpdatePositionExplore(position);

        //IJ.showMessage("Refactored position, " + PreProcessingStepsList.size()+ " blocks remain.");
        ExploreStepsList.trimToSize();

        //IJ.showMessage("List trimmed to size");
        //reset PreProcessingStepsPanel
        ExploreStepsPanel.removeAll();

        ExploreStepsPanel.setLayout(ExploreLayout);

        //IJ.showMessage("Panel cleared position");
        //rebuild Panel
        if (ExploreStepsList.size() < 0) {
        } else {
            RebuildPanelExplore();
        }

        //IJ.showMessage("Panel rebuilt");
        if (5 >= ExploreStepsList.size()) {
            AddStep_Explore.setEnabled(true);
        }

        ExploreStepsPanel.repaint();
        pack();

    }

    public void RebuildPanelPreProcessing() {

        ProcessStepBlockGUI sb;

        ListIterator<Object> litr = PreProcessingStepsList.listIterator();
        while (litr.hasNext()) {
            sb = (ProcessStepBlockGUI) litr.next();
            sb.setPosition(PreProcessingStepsList.indexOf(sb) + 1);
            PreProcessingStepsPanel.add(sb.getPanel());
        }

    }

    public void RebuildPanelObject() {

        ObjectStepBlockGUI sb;

        ListIterator<Object> litr = ObjectStepsList.listIterator();
        while (litr.hasNext()) {
            sb = (ObjectStepBlockGUI) litr.next();
            sb.setPosition(ObjectStepsList.indexOf(sb) + 1);

            ObjectStepsPanel.add(sb.getPanel());
        }

    }

    public void RebuildPanelExplore() {

        ExploreStepBlockGUI sb;

        ListIterator<Object> litr = ExploreStepsList.listIterator();
        while (litr.hasNext()) {
            sb = (ExploreStepBlockGUI) litr.next();
            sb.setPosition(ExploreStepsList.indexOf(sb) + 1);

            ExploreStepsPanel.add(sb.getPanel());
        }

    }

    public void UpdatePositionPreProcessing(int position) {

        ProcessStepBlockGUI sb;

        //ArrayList al = new ArrayList();
        if (PreProcessingStepsList.size() > position + 1) {
            for (int i = position - 1; i <= PreProcessingStepsList.size() - 1; i++) {

                sb = (ProcessStepBlockGUI) PreProcessingStepsList.get(i);
                sb.setPosition(i - 1);
                PreProcessingStepsList.set(i, sb);

            }
        }
//        if(PreProcessingStepsList.isEmpty()) {position = 1;}
//        else{position = PreProcessingStepsList.size()+1;}

    }

    public void UpdatePositionObject(int position) {

        ObjectStepBlockGUI sb;

        //ArrayList al = new ArrayList();
        if (ObjectStepsList.size() > position + 1) {
            for (int i = position - 1; i <= ObjectStepsList.size() - 1; i++) {

                sb = (ObjectStepBlockGUI) ObjectStepsList.get(i);
                sb.setPosition(i - 1);
                ObjectStepsList.set(i, sb);

            }
        }
//        if(PreProcessingStepsList.isEmpty()) {position = 1;}
//        else{position = PreProcessingStepsList.size()+1;}

    }

    public void UpdatePositionExplore(int position) {

        ExploreStepBlockGUI esb;

        //ArrayList al = new ArrayList();
        if (ObjectStepsList.size() > position + 1) {
            for (int i = position - 1; i <= ExploreStepsList.size() - 1; i++) {

                esb = (ExploreStepBlockGUI) ExploreStepsList.get(i);
                esb.setPosition(i - 1);
                ExploreStepsList.set(i, esb);

            }
        }
//        if(PreProcessingStepsList.isEmpty()) {position = 1;}
//        else{position = PreProcessingStepsList.size()+1;}

    }

    public void UpdateImageList() {
        openerWindow.updateImages();
    }


private void executePreprocessing() {

        ArrayList protocol = new ArrayList();

//get the arraylist, decide the nubmer of steps, by .steps to do and whether this is a preview or final by .type
        protocol = ExtractSteps(PreProcessingStepsList, PROCESSBLOCKS);

        MicroProtocolPreProcessing mpp = new MicroProtocolPreProcessing(OriginalImage, protocol);

        mpp.ProcessImage();

        this.ProcessedImage = mpp.getResult();
        this.ProcessedImage.setTitle(OriginalImage.getTitle()+"_Processed");
        this.ProcessedImage.show();
        
        


        //use function selection with a new class
        //new class for preprocessing?
//MicroPreProcessing mpp = new MicroPreProcessing(this.OriginalImage.duplicate(), protocol);
//
//this.ProcessedImage = mpp.ProcessImage();
//this.ProcessedImage.show();
//
    }

    ;

private void executeObjectFinding() {

        this.ObjectProcess.setIndeterminate(true);

        ArrayList protocol = new ArrayList();

        protocol = ExtractSteps(ObjectStepsList, OBJECTBLOCKS);

        IJ.log("ExtractStep result: " + protocol);
        me.addFolder(ProcessedImage, protocol);
        this.ObjectProcess.setIndeterminate(false);

    }

    ;

private void executeExploring(int i) {
        me.addExplore(ProcessedImage, "VTEA-Explorer Window, " + ProcessedImage.getTitle(), me.getVolumes(i), me.getAvailableData(i));
    }

    ;

private ArrayList ExtractSteps(ArrayList sb_al, int blocktype) {

        ArrayList Result = new ArrayList();

        if (blocktype == PROCESSBLOCKS) {

            ProcessStepBlockGUI ppsb;

            ListIterator<Object> litr = sb_al.listIterator();
            while (litr.hasNext()) {
                ppsb = (ProcessStepBlockGUI) litr.next();
                if (!(ppsb.Comment.getText()).equals("New Image")) {
                    Result.add(ppsb.getVariables());
                }
            }
        }

        if (blocktype == OBJECTBLOCKS) {

            ObjectStepBlockGUI osb;

            ListIterator<Object> litr = sb_al.listIterator();
            while (litr.hasNext()) {
                osb = (ObjectStepBlockGUI) litr.next();

                Result.add(osb.getVariables());
                System.out.println("OSB variables: " + Result);
            }
        }

        return Result;
    }

    public void addListener(AnalysisStartListener listener) {
        listeners.add(listener);
    }

    private void notifyListeners(int i) {
        for (AnalysisStartListener listener : listeners) {
            listener.onStartButton(i);
        }
    }
    
    private ImagePlus makeThumbnail(ImagePlus imp){    
        int nchannels = imp.getNChannels(); 
  
        
        CompositeImage compImp = new CompositeImage(imp, IJ.COMPOSITE);
        
        
        compImp.setPosition(imp.getStackSize()/2);
        compImp.setOpenAsHyperStack(true);
        
        
        for(int i = 1; i <= compImp.getNChannels(); i++){
            
            
            //compImp.setChannelLut(null, nchannels);
        
            
            switch(i){
                case 1:
                        compImp.setChannelLut(LUT.createLutFromColor(Color.CYAN),i);compImp.resetDisplayRange();break; 
                case 2:
                        compImp.setChannelLut(LUT.createLutFromColor(Color.RED),i);compImp.resetDisplayRange();break;
                case 3:
                        compImp.setChannelLut(LUT.createLutFromColor(Color.GREEN),i);compImp.resetDisplayRange();break;
                case 4:
                        compImp.setChannelLut(LUT.createLutFromColor(Color.MAGENTA),i);compImp.resetDisplayRange();break;        
                case 5:
                        compImp.setChannelLut(LUT.createLutFromColor(Color.YELLOW),i);compImp.resetDisplayRange();break;
                case 6:
                        compImp.setChannelLut(LUT.createLutFromColor(Color.BLUE),i);compImp.resetDisplayRange();break;
                case 7:
                        compImp.setChannelLut(LUT.createLutFromColor(Color.WHITE),i);compImp.resetDisplayRange();break;
                default:
                        break;
            }
            
          ContrastAdjuster.update();
          
        }
        compImp.flatten();
        return compImp;
    }
    
    class ImagePanel extends JPanel {

  private Image img;

  public ImagePanel(Image img) {
    this.img = img;
    Dimension size = new Dimension(img.getWidth(null), img.getHeight(null));
    setPreferredSize(size);
    setMinimumSize(size);
    setMaximumSize(size);
    setSize(size);
    setLayout(null);
  }

  public void paintComponent(Graphics g) {
    g.drawImage(img, 0, 0, null);
  }

}

    @Override
    public void onSelect(ImagePlus imp, int tab) {

        this.OriginalImage = imp.duplicate();
         OriginalImage.setOpenAsHyperStack(true);
        
        this.ThumbnailImage = makeThumbnail(imp.duplicate());
        

        

        Channels = new ArrayList<String>();
        for (int i = 0; i <= OriginalImage.getNChannels() - 1; i++) {
            Channels.add("Channel_" + i);
        }

        AddStep_Preprocessing.setEnabled(true);

        ProcessStepBlockGUI block = new ProcessStepBlockGUI(imp.getTitle(), "New Image", Color.GREEN, this.batch);
        PreProcessingStepsPanel.setLayout(PreProcessingLayout);
        PreProcessingStepsPanel.add(block.getPanel());
        PreProcessingStepsPanel.repaint();
        pack();

        PreProcessingStepsList.add(block);

        if (PreProcessingStepsList.size() <= 4) {

            AddStep_Preprocessing.setEnabled(true);
        }
        if (PreProcessingStepsList.size() >= 5) {

            AddStep_Preprocessing.setEnabled(false);
        }
    }

};

//class MultipleFilesMenu extends JPopupMenu implements ActionListener, ItemListener {
//                JRadioButtonMenuItem SingleFile;
//                JRadioButtonMenuItem MultipleFiles;
//                JMenuItem Item2;
//                JMenuItem Item3;
//                boolean batch;
//                private ArrayList<BatchStateListener> listeners = new ArrayList<BatchStateListener>();
//                
//                public MultipleFilesMenu(boolean multiple){
//                    batch = multiple;
//                     MultipleFiles = new JRadioButtonMenuItem("Multiple Files");
//                     MultipleFiles.setSelected(multiple);
//                     MultipleFiles.setActionCommand("Multiple");
//                     MultipleFiles.addItemListener(this);
//                     MultipleFiles.addActionListener(this);
//                     Item2 = new JMenuItem("Item2");
//                     Item3 = new JMenuItem("Item3");
//
//                    add(MultipleFiles);
//                    addSeparator();
//                    add(Item2);
//                    add(Item3);
//                } 
//
//    @Override
//    public void itemStateChanged(ItemEvent ie) {
//        
//    }
//
//    @Override
//    public void actionPerformed(ActionEvent ae) {
//        if(ae.getActionCommand().equals("Multiple")){
//            batch = !batch;
//            notifyBatchListeners(batch);
//        }
////    }
//    
//    public void addBatchListener(BatchStateListener listener) {
//        listeners.add(listener);
//    }
//
//    public void notifyBatchListeners(boolean batch) {
//        for (BatchStateListener listener : listeners) {
//            listener.batchStateChanged(batch);
//        }
//    }
//                }
