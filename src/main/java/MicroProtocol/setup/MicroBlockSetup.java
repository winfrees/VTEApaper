/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MicroProtocol.setup;

import MicroProtocol.listeners.MicroBlockSetupListener;
import VTC._VTC;
import ij.IJ;
import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;

/**
 *
 * @author winfrees
 */
public class MicroBlockSetup extends javax.swing.JFrame implements Cloneable {

    private String[] ProcessOptions = {"", "", ""};
    
    protected ArrayList<String> Channels = new ArrayList<String>();
    
    
    protected DefaultComboBoxModel cbm;
    protected DefaultComboBoxModel ccbm;
    public ArrayList<MicroBlockSetupListener> MicroBlockSetupListeners = new ArrayList<MicroBlockSetupListener>();
    protected ArrayList CurrentStepProtocol = new ArrayList();
    protected int step;

    /**
     * 'CurrentStepProtocol' contains an array of objects for the current
     * protocol, Process Channel or image selection Components for specific
     * plugin or process
     */
    private JPanel[] SetupPanes = new JPanel[3];
    private String CurrentProtocol = new String();
    private int CurrentProcess = 0;

    final protected String DefaultTitle;


    protected ArrayList CurrentProcessList;
    protected ArrayList<ArrayList> CurrentProcessItems = new ArrayList<ArrayList>();

    /**
     * Creates new form MicroBlockSetup
     *
     * @param step
     */
    MicroBlockSetup(int step, ArrayList channel) {
  
        Channels = channel;

        this.step = step;
        
        for (int i = 0; i < 10; i++) { CurrentProcessItems.add(null);}

        DefaultTitle = "BlockStep_" + step;
        cbm = new DefaultComboBoxModel(ProcessOptions);
        ccbm = new DefaultComboBoxModel(Channels.toArray());
        CurrentProcessList = new ArrayList(10);
        //this.CurrentProcessItems = new ArrayList(10);
        initComponents();
        ChannelComboBox.setVisible(false);
        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jMenuItem1 = new javax.swing.JMenuItem();
        MethodSelection = new javax.swing.JPanel();
        PositionText = new javax.swing.JLabel();
        MenuTypeText = new javax.swing.JLabel();
        ProcessSelectComboBox = new javax.swing.JComboBox();
        TitleText = new javax.swing.JTextField();
        Comments = new javax.swing.JPanel();
        notesPane = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        ProcessNotes = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        tablePane = new javax.swing.JLayeredPane();
        secondaryObjects = new javax.swing.JLabel();
        tableScrollPane = new javax.swing.JScrollPane();
        secondaryTable = new javax.swing.JTable();
        MethodBuild = new javax.swing.JPanel();
        MethodDetails = new javax.swing.JPanel();
        ButtonPanel = new javax.swing.JPanel();
        BlockSetupOK = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 32), new java.awt.Dimension(10, 32), new java.awt.Dimension(10, 32));
        BlockSetupCancel = new javax.swing.JButton();
        MISC_1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        ProcessText = new javax.swing.JLabel();
        ChannelComboBox = new javax.swing.JComboBox();

        jMenuItem1.setText("jMenuItem1");

        setBackground(new java.awt.Color(204, 204, 204));
        setMinimumSize(VTC._VTC.BLOCKSETUP);
        setName("BlockOptionFrame"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(378, 282));
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 1, 0};
        layout.rowHeights = new int[] {0, 1, 0, 1, 0};
        getContentPane().setLayout(layout);

        MethodSelection.setBackground(VTC._VTC.BACKGROUND);
        MethodSelection.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        MethodSelection.setPreferredSize(new java.awt.Dimension(340, 40));
        java.awt.GridBagLayout MethodSelectionLayout = new java.awt.GridBagLayout();
        MethodSelectionLayout.columnWidths = new int[] {0, 1, 0, 1, 0, 1, 0};
        MethodSelectionLayout.rowHeights = new int[] {0};
        MethodSelection.setLayout(MethodSelectionLayout);

        PositionText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        PositionText.setText("P");
        PositionText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                PositionTextMousePressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        MethodSelection.add(PositionText, gridBagConstraints);

        MenuTypeText.setText("Processing");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(19, 0, 0, 2);
        MethodSelection.add(MenuTypeText, gridBagConstraints);

        ProcessSelectComboBox.setBackground(VTC._VTC.BACKGROUND);
        ProcessSelectComboBox.setModel(this.cbm);
        ProcessSelectComboBox.setMaximumSize(new java.awt.Dimension(150, 27));
        ProcessSelectComboBox.setMinimumSize(new java.awt.Dimension(150, 27));
        ProcessSelectComboBox.setPreferredSize(new java.awt.Dimension(200, 27));
        ProcessSelectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProcessSelectComboBoxActionPerformed(evt);
            }
        });
        ProcessSelectComboBox.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                ProcessSelectComboBoxCaretPositionChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        MethodSelection.add(ProcessSelectComboBox, gridBagConstraints);

        TitleText.setBackground(VTC._VTC.BACKGROUND);
        TitleText.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        TitleText.setText("Position");
        TitleText.setBorder(null);
        TitleText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TitleTextFocusLost(evt);
            }
        });
        TitleText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TitleTextKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        MethodSelection.add(TitleText, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(MethodSelection, gridBagConstraints);

        Comments.setBackground(VTC._VTC.BACKGROUND);
        Comments.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Comments.setMaximumSize(new java.awt.Dimension(359, 100));
        Comments.setMinimumSize(new java.awt.Dimension(359, 100));
        Comments.setPreferredSize(new java.awt.Dimension(359, 100));
        Comments.setLayout(new javax.swing.BoxLayout(Comments, javax.swing.BoxLayout.LINE_AXIS));

        notesPane.setBackground(VTC._VTC.BACKGROUND);
        notesPane.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("Notes");
        notesPane.add(jLabel3, new java.awt.GridBagConstraints());

        ProcessNotes.setMaximumSize(new java.awt.Dimension(150, 50));
        ProcessNotes.setMinimumSize(new java.awt.Dimension(150, 50));
        ProcessNotes.setPreferredSize(new java.awt.Dimension(150, 50));

        jTextPane1.setMaximumSize(new java.awt.Dimension(150, 50));
        jTextPane1.setMinimumSize(new java.awt.Dimension(150, 50));
        jTextPane1.setPreferredSize(new java.awt.Dimension(150, 50));
        jTextPane1.setSize(new java.awt.Dimension(150, 50));
        ProcessNotes.setViewportView(jTextPane1);

        notesPane.add(ProcessNotes, new java.awt.GridBagConstraints());

        Comments.add(notesPane);

        tablePane.setMaximumSize(new java.awt.Dimension(360, 90));
        tablePane.setMinimumSize(new java.awt.Dimension(360, 90));
        tablePane.setLayout(new java.awt.GridBagLayout());

        secondaryObjects.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        secondaryObjects.setText("Secondary Object Classifiers");
        secondaryObjects.setMinimumSize(new java.awt.Dimension(180, 30));
        secondaryObjects.setPreferredSize(new java.awt.Dimension(180, 20));
        tablePane.add(secondaryObjects, new java.awt.GridBagConstraints());

        tableScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        tableScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        tableScrollPane.setMinimumSize(new java.awt.Dimension(360, 90));
        tableScrollPane.setPreferredSize(new java.awt.Dimension(360, 110));
        tableScrollPane.setViewportView(null);

        secondaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        secondaryTable.setBounds(new java.awt.Rectangle(0, 0, 360, 70));
        secondaryTable.setMinimumSize(new java.awt.Dimension(340, 70));
        secondaryTable.setPreferredSize(new java.awt.Dimension(340, 90));
        secondaryTable.setShowGrid(false);
        tableScrollPane.setViewportView(secondaryTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        tablePane.add(tableScrollPane, gridBagConstraints);

        Comments.add(tablePane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 19;
        gridBagConstraints.ipady = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(Comments, gridBagConstraints);

        MethodBuild.setBackground(VTC._VTC.BACKGROUND);
        MethodBuild.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        MethodBuild.setMaximumSize(new java.awt.Dimension(359, 60));
        MethodBuild.setMinimumSize(new java.awt.Dimension(359, 60));
        MethodBuild.setPreferredSize(new java.awt.Dimension(359, 60));
        MethodBuild.setSize(new java.awt.Dimension(359, 60));
        MethodBuild.setLayout(new java.awt.GridBagLayout());

        defaultProtocolPanel();
        MethodDetails.setBackground(VTC._VTC.BACKGROUND);
        MethodDetails.setMaximumSize(new java.awt.Dimension(340, 50));
        MethodDetails.setMinimumSize(new java.awt.Dimension(340, 50));
        MethodDetails.setPreferredSize(new java.awt.Dimension(340, 50));
        MethodDetails.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 176, 7, 176);
        MethodBuild.add(MethodDetails, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(MethodBuild, gridBagConstraints);

        ButtonPanel.setMinimumSize(VTC._VTC.BLOCKSETUPPANEL);
        ButtonPanel.setLayout(new java.awt.GridBagLayout());

        BlockSetupOK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/dialog-apply.png"))); // NOI18N
        BlockSetupOK.setMaximumSize(VTC._VTC.SMALLBUTTONSIZE);
        BlockSetupOK.setMinimumSize(VTC._VTC.SMALLBUTTONSIZE);
        BlockSetupOK.setPreferredSize(VTC._VTC.SMALLBUTTONSIZE);
        BlockSetupOK.setSize(VTC._VTC.SMALLBUTTONSIZE);
        BlockSetupOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlockSetupOKActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        ButtonPanel.add(BlockSetupOK, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        ButtonPanel.add(filler1, gridBagConstraints);

        BlockSetupCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit-delete-6_24.png"))); // NOI18N
        BlockSetupCancel.setMaximumSize(VTC._VTC.SMALLBUTTONSIZE);
        BlockSetupCancel.setMinimumSize(VTC._VTC.SMALLBUTTONSIZE);
        BlockSetupCancel.setPreferredSize(VTC._VTC.SMALLBUTTONSIZE);
        BlockSetupCancel.setSize(VTC._VTC.SMALLBUTTONSIZE);
        BlockSetupCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlockSetupCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        ButtonPanel.add(BlockSetupCancel, gridBagConstraints);

        MISC_1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit-delete-6_24.png"))); // NOI18N
        MISC_1.setEnabled(false);
        MISC_1.setMaximumSize(VTC._VTC.SMALLBUTTONSIZE);
        MISC_1.setMinimumSize(VTC._VTC.SMALLBUTTONSIZE);
        MISC_1.setPreferredSize(VTC._VTC.SMALLBUTTONSIZE);
        MISC_1.setSize(VTC._VTC.SMALLBUTTONSIZE);
        MISC_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MISC_1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        ButtonPanel.add(MISC_1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        getContentPane().add(ButtonPanel, gridBagConstraints);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        getContentPane().add(jPanel2, gridBagConstraints);

        jPanel3.setBackground(VTC._VTC.BACKGROUND);
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new java.awt.GridBagLayout());

        ProcessText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ProcessText.setText("Background Subtraction");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 0);
        jPanel3.add(ProcessText, gridBagConstraints);

        ChannelComboBox.setModel(ccbm);
        ChannelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChannelComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 5;
        jPanel3.add(ChannelComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jPanel3, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ProcessSelectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProcessSelectComboBoxActionPerformed
  updateProtocolPanel();
    }//GEN-LAST:event_ProcessSelectComboBoxActionPerformed

    private void BlockSetupCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlockSetupCancelActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_BlockSetupCancelActionPerformed

    private void BlockSetupOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlockSetupOKActionPerformed
        // TODO add your handling code here:
        blockSetupOKAction();
    }//GEN-LAST:event_BlockSetupOKActionPerformed

    private void MISC_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MISC_1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MISC_1ActionPerformed

    private void ProcessSelectComboBoxCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_ProcessSelectComboBoxCaretPositionChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_ProcessSelectComboBoxCaretPositionChanged

    private void ChannelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChannelComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ChannelComboBoxActionPerformed

    private void PositionTextMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PositionTextMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_PositionTextMousePressed

    private void TitleTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TitleTextKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TitleTextKeyPressed

    private void TitleTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TitleTextFocusLost
        if (TitleText.getText().length() == 0) {
            TitleText.setText(DefaultTitle);
        }
        pack();
    }//GEN-LAST:event_TitleTextFocusLost

    public void addMicroBlockSetupListener(MicroBlockSetupListener listener) {
        MicroBlockSetupListeners.add(listener);
        //IJ.showMessage("microblocksetuplistener added");

    }

    protected void notifyMicroBlockSetupListeners(ArrayList al) {
        for (MicroBlockSetupListener listener : MicroBlockSetupListeners) {

            // IJ.showMessage("notifying microblocksetuplisteners");
            listener.onChangeSetup(al);

        }
    }

    protected ArrayList makeComponentsArray(int position) {

        ArrayList result = new ArrayList();

        return result;
    }

    private JPanel defaultProtocolPanel() {
        return makeProtocolPanel(0);
    }

    protected JPanel makeProtocolPanel(int position) {

        IJ.log("Current protocol: " + position);
        JPanel BuiltPanel = new JPanel();
        ArrayList ProcessComponents = new ArrayList();

        ProcessComponents = makeComponentsArray(position);

        //IJ.log("Components: " + ProcessComponents);
        //MethodDetails = new JPanel();
        MethodDetails.setVisible(false);
        MethodDetails.removeAll();

//      JPanel options = new JPanel();
//      JLabel label1 = new JLabel("test_1");
//      JLabel label2 = new JLabel("test_2");
//      JLabel label3 = new JLabel("test_3");
//      JLabel label4 = new JLabel("test_4");
//      JLabel label5 = new JLabel("test_5");
//      JLabel label6 = new JLabel("test_6");
//      
//      JTextField text1 = new JTextField(5);
//      JTextField text2 = new JTextField(5);
//      JTextField text3 = new JTextField(5);
//      JTextField text4 = new JTextField(5);
//      JTextField text5 = new JTextField(5);
//      JTextField text6 = new JTextField(5);
//      
//      JRadioButton radio1 = new JRadioButton("radio1", false);
//      JRadioButton radio2 = new JRadioButton("radio2", false);
//      JRadioButton radio3 = new JRadioButton("radio3", false);   
//      JRadioButton radio4 = new JRadioButton("radio4", false);
//      JRadioButton radio5 = new JRadioButton("radio5", false);
//      JRadioButton radio6 = new JRadioButton("radio6", false);
        BuiltPanel.setLayout(new GridBagLayout());
        GridBagConstraints layoutConstraints = new GridBagConstraints();

        //MethodDetail
        if (ProcessComponents.size() > 0) {
            layoutConstraints.fill = GridBagConstraints.CENTER;
            layoutConstraints.gridx = 0;
            layoutConstraints.gridy = 0;
            layoutConstraints.weightx = 1;
            layoutConstraints.weighty = 1;
            MethodDetails.add((Component) ProcessComponents.get(0), layoutConstraints);
        }

        if (ProcessComponents.size() > 1) {
            layoutConstraints.fill = GridBagConstraints.HORIZONTAL;
            layoutConstraints.gridx = 1;
            layoutConstraints.gridy = 0;
            //layoutConstraints.weightx = 1;
            //layoutConstraints.weighty = 1;
            MethodDetails.add((Component) ProcessComponents.get(1), layoutConstraints);
        }

        if (ProcessComponents.size() > 2) {
            layoutConstraints.fill = GridBagConstraints.CENTER;
            layoutConstraints.gridx = 2;
            layoutConstraints.gridy = 0;
            //layoutConstraints.weightx = 1;
            //layoutConstraints.weighty = 1;
            MethodDetails.add((Component) ProcessComponents.get(2), layoutConstraints);
        }
        if (ProcessComponents.size() > 3) {
            layoutConstraints.fill = GridBagConstraints.HORIZONTAL;
            layoutConstraints.gridx = 3;
            layoutConstraints.gridy = 0;
            //layoutConstraints.weightx = 1;
            //layoutConstraints.weighty = 1;
            MethodDetails.add((Component) ProcessComponents.get(3), layoutConstraints);
        }
        if (ProcessComponents.size() > 4) {
            layoutConstraints.fill = GridBagConstraints.CENTER;
            layoutConstraints.gridx = 0;
            layoutConstraints.gridy = 1;
            //layoutConstraints.weightx = 1;
            //layoutConstraints.weighty = 1;
            MethodDetails.add((Component) ProcessComponents.get(4), layoutConstraints);
        }
        if (ProcessComponents.size() > 5) {
            layoutConstraints.fill = GridBagConstraints.HORIZONTAL;
            layoutConstraints.gridx = 1;
            layoutConstraints.gridy = 1;
            //layoutConstraints.weightx = 1;
            //layoutConstraints.weighty = 1;
            MethodDetails.add((Component) ProcessComponents.get(5), layoutConstraints);
        }
        if (ProcessComponents.size() > 6) {
            layoutConstraints.fill = GridBagConstraints.CENTER;
            layoutConstraints.gridx = 2;
            layoutConstraints.gridy = 1;
            //layoutConstraints.weightx = 1;
            //layoutConstraints.weighty = 1;
            MethodDetails.add((Component) ProcessComponents.get(6), layoutConstraints);
        }
        if (ProcessComponents.size() > 7) {
            layoutConstraints.fill = GridBagConstraints.HORIZONTAL;
            layoutConstraints.gridx = 3;
            layoutConstraints.gridy = 1;
            //layoutConstraints.weightx = 1;
            //layoutConstraints.weighty = 1;
            MethodDetails.add((Component) ProcessComponents.get(7), layoutConstraints);
        }
        //MethodDetails.setSize(_VTC.BLOCKSETUPPANEL);
//                layoutConstraints.fill = GridBagConstraints.BOTH;
//        layoutConstraints.gridx = 2;
//        layoutConstraints.gridy = 0;
//        layoutConstraints.weightx = -1;
//        layoutConstraints.weighty = -1;
//        layoutConstraints.ipadx = -1;
//        layoutConstraints.ipady = -1;
//        step.add(DeleteButton,layoutConstraints);
//                        layoutConstraints.fill = GridBagConstraints.BOTH;
//        layoutConstraints.gridx = 2;
//        layoutConstraints.gridy = 1;
//        layoutConstraints.weightx = -1;
//        layoutConstraints.weighty = -1;
//        layoutConstraints.ipadx = -1;
//        layoutConstraints.ipady = -1;
//        step.add(EditButton,layoutConstraints);

        pack();
        MethodDetails.setVisible(true);

        if (!(null == this.CurrentProcessList)) {
            this.CurrentProcessList.clear();
        }
        this.CurrentProcessList.add(this.cbm.getSelectedItem());
        this.CurrentProcessList.add(this.ccbm.getSelectedItem());
        //this.CurrentProcessList.add(this.jTextPane1.getText());
        this.CurrentProcessList.addAll(ProcessComponents);

        return MethodDetails;
    }

    protected void blockSetupOKAction() {

        this.CurrentStepProtocol = CurrentProcessList;

        notifyMicroBlockSetupListeners(this.CurrentStepProtocol);

        this.setVisible(false);

    }
    
    protected void updateProtocolPanel() {
 
        MethodDetails.setVisible(false);
        MethodDetails.removeAll();

        makeProtocolPanel(ProcessSelectComboBox.getSelectedIndex());
        ChannelComboBox.setVisible(true);
        MethodDetails.revalidate();
        MethodDetails.repaint();
        MethodDetails.setVisible(true);
        pack();
    }
    
    @Override
    public Object clone() throws CloneNotSupportedException {
        return super.clone(); //To change body of generated methods, choose Tools | Templates.
    }
 

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MicroBlockSetup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MicroBlockSetup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MicroBlockSetup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MicroBlockSetup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new MicroBlockSetup().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton BlockSetupCancel;
    protected javax.swing.JButton BlockSetupOK;
    private javax.swing.JPanel ButtonPanel;
    protected javax.swing.JComboBox ChannelComboBox;
    protected javax.swing.JPanel Comments;
    private javax.swing.JButton MISC_1;
    protected javax.swing.JLabel MenuTypeText;
    private javax.swing.JPanel MethodBuild;
    protected javax.swing.JPanel MethodDetails;
    private javax.swing.JPanel MethodSelection;
    protected javax.swing.JLabel PositionText;
    private javax.swing.JScrollPane ProcessNotes;
    protected javax.swing.JComboBox ProcessSelectComboBox;
    protected javax.swing.JLabel ProcessText;
    protected javax.swing.JTextField TitleText;
    private javax.swing.Box.Filler filler1;
    protected javax.swing.JLabel jLabel3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    protected javax.swing.JTextPane jTextPane1;
    protected javax.swing.JPanel notesPane;
    private javax.swing.JLabel secondaryObjects;
    protected javax.swing.JTable secondaryTable;
    protected javax.swing.JLayeredPane tablePane;
    private javax.swing.JScrollPane tableScrollPane;
    // End of variables declaration//GEN-END:variables

}
